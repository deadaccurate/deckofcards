package jdeck;
import jdeck.Suit;
import jdeck.FaceValue;

/**
 * This class defines the information for a card that makes up a deck.
 * A card contains a suit and a value. This class should be immutable.
 * @author jon
 *
 */
public final class Card
{
    // The defined suit of this cards
    private final Suit suit;
    // The value of this card
    private final FaceValue value;
    
    /**
     * This constructor simply assigns the passed parameters to the instance
     * variables.
     * 
     * @param cardSuit is used as Suit of this card
     * @param faceVal is the FaceValue (the value) of this card
     */
    public Card(Suit cardSuit, FaceValue faceVal)
    {
        suit = cardSuit;
        value = faceVal;
    }
    
    /**
     * This method overrides the default toString() method.
     * It returns a string representation of the card's suit and value.
     * 
     * @return a String representation of the card
     */
    public @Override String toString()
    {
        return "SUIT\n" + suit + "\nVALUE\n" + value;
    }
    
    /**
     * This getter returns the card's suit.
     * 
     * @return the Suit of the card
     */
    public Suit getSuit()
    {
        return suit;
    }
    
    /**
     * Generated by eclipse. Creates a hash code specific to a Card object.
     * 
     * @return an int representing the hash code of this Card object
     */
    @Override
    public int hashCode()
    {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((suit == null) ? 0 : suit.hashCode());
        result = prime * result + ((value == null) ? 0 : value.hashCode());
        return result;
    }

    /**
     * This method overrides the default equals method.
     * 
     * @param obj should be a Card object
     * @return true if the objects are equal and false if not
     */
    @Override
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Card other = (Card) obj;
        if (suit == null)
        {
            if (other.suit != null)
                return false;
        }
        else if (!suit.equals(other.suit))
            return false;
        if (value == null)
        {
            if (other.value != null)
                return false;
        }
        else if (!value.equals(other.value))
            return false;
        return true;
    }

    /**
     * This getter returns the value of the card.
     * 
     * @return the FaceValue of the card
     */
    public FaceValue getFaceValue()
    {
        return value;
    }
}
